package com.payment.gateway.thirdpart.unionpay.acp.demo;

import java.util.HashMap;
import java.util.Map;

import com.unionpay.acp.sdk.SDKConfig;

/**
 * 
 * Name:  Payment over Internet - Cross-border<br>
 * Function: 5.3.1 Front-end Purchase Transaction<br>
 * Back-end Transaction<br>
 * Version:  5.0<br>
 * Updated:  July 2014<br>
 * Author:  China UnionPay ACP Team<br>
 * Copyright:  China UnionPay<br>
 * Notes: The following sample code is for testing only. Merchants can write their own code based on their needs following technical documentation. The following code is for reference only.<br>
 */
public class Form00_5_3_1_f extends DemoBase {

	public static Map<String, String> setFormDate() {

		/**
		 * Assembly request message
		 */
		Map<String, String> contentData = new HashMap<String, String>();
		// Constant value
		contentData.put("version", "5.0.0");// M
		// Default value: UTF-8
		contentData.put("encoding", "UTF-8");// M
		// Value: 01 (RSA)
		contentData.put("signMethod", "01");// M
		// Value: 01
		contentData.put("txnType", "01");// M
		// 01: Self-help purchase. Front-end and back-end transactions (including payment without skipping) are identified according to address . 03: Payment by installments
		contentData.put("txnSubType", "00");// M
		// 
		contentData.put("bizType", "000801");// M
		// Channel type: 07-Over Internet; 08-Mobile
		contentData.put("channelType", "07");// M
		// Used when front end returns merchant result. Front-end transaction should be uploaded.
		contentData.put("frontUrl", frontUrl);// C
		// Used when back end returns merchant result; if data is submitted, back-end transaction result notice will be sent to merchant.
		contentData.put("backUrl", backUrl);// M
		// Access type: 0-Direct access by ordinary merchant; 2-Access by platform merchant
		contentData.put("accessType", "0");// M
		// Acquirer Code
		contentData.put("acqInsCode", "00010000");
		// Merchant Category
		contentData.put("merCatCode", "");// M
		// Merchant Name
		contentData.put("merName", "");// M
		// Merchant Abbreviation
		contentData.put("merAbbr", "");// M
		// Merchant ID
		contentData.put("merId", "802290049000180");// M
		// Merchant order No., generated by merchant. Merchant's unique internal number.
		contentData.put("orderId", getOrderId());// M
		// Date and time when merchant sends transaction
		contentData.put("txnTime", getCurrentTime());// M
		// The unit of transaction amount is cent.
		contentData.put("txnAmt", "1");// M
		// Default value is 156.
		contentData.put("currencyCode", "156");// M
		// Payment timeout, applicable to SecurePay only.
		contentData.put("payTimeout", "");// O

		return contentData;
	}

	public static void main(String[] args) {

		/**
		 * <pre>
		 * Parameter initialization 
		 * 1. When it runs as a java main method, configuration file will be loaded every time. 
		 * 2. When it runs as a java web application, code for configuration file initialization can be included in listener.
		 * </pre>
		 */
		SDKConfig.getConfig().loadPropertiesFromSrc();
		/**
		 * Transaction request url, read from configuration file
		 */
		String requestFrontUrl = SDKConfig.getConfig().getFrontRequestUrl();

		/**
		 * Create a form
		 */
		String html = createHtml(requestFrontUrl, signData(setFormDate()));
		System.out.println(html);

	}

}
